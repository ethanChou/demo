/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftCommon
{
  public partial class LenelDataService {
    public interface Iface {
      List<ReaderList> GetReaders();
      #if SILVERLIGHT
      IAsyncResult Begin_GetReaders(AsyncCallback callback, object state);
      List<ReaderList> End_GetReaders(IAsyncResult asyncResult);
      #endif
      bool SetVisitorReader(List<ReaderList> readers);
      #if SILVERLIGHT
      IAsyncResult Begin_SetVisitorReader(AsyncCallback callback, object state, List<ReaderList> readers);
      bool End_SetVisitorReader(IAsyncResult asyncResult);
      #endif
      bool SetFaceReader(List<ReaderList> readers);
      #if SILVERLIGHT
      IAsyncResult Begin_SetFaceReader(AsyncCallback callback, object state, List<ReaderList> readers);
      bool End_SetFaceReader(IAsyncResult asyncResult);
      #endif
      bool AdrelationOprator(DbOprator dboprator, Adrelation adrelation);
      #if SILVERLIGHT
      IAsyncResult Begin_AdrelationOprator(AsyncCallback callback, object state, DbOprator dboprator, Adrelation adrelation);
      bool End_AdrelationOprator(IAsyncResult asyncResult);
      #endif
      List<Adrelation> GetAdralations(string id, string lnl_id, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAdralations(AsyncCallback callback, object state, string id, string lnl_id, string name);
      List<Adrelation> End_GetAdralations(IAsyncResult asyncResult);
      #endif
      bool DepartmentOprator(DbOprator dboprator, Department department);
      #if SILVERLIGHT
      IAsyncResult Begin_DepartmentOprator(AsyncCallback callback, object state, DbOprator dboprator, Department department);
      bool End_DepartmentOprator(IAsyncResult asyncResult);
      #endif
      List<Department> GetDepartments(string ad_id, string id, string lnl_id, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_GetDepartments(AsyncCallback callback, object state, string ad_id, string id, string lnl_id, string name);
      List<Department> End_GetDepartments(IAsyncResult asyncResult);
      #endif
      bool EmployeeOprator(DbOprator dboprator, Employee employee);
      #if SILVERLIGHT
      IAsyncResult Begin_EmployeeOprator(AsyncCallback callback, object state, DbOprator dboprator, Employee employee);
      bool End_EmployeeOprator(IAsyncResult asyncResult);
      #endif
      List<Employee> GetEmployees(string dep_id, string id, string lnl_id, string name, string card_NO);
      #if SILVERLIGHT
      IAsyncResult Begin_GetEmployees(AsyncCallback callback, object state, string dep_id, string id, string lnl_id, string name, string card_NO);
      List<Employee> End_GetEmployees(IAsyncResult asyncResult);
      #endif
      bool AddVisitorList(VisitorList vlist);
      #if SILVERLIGHT
      IAsyncResult Begin_AddVisitorList(AsyncCallback callback, object state, VisitorList vlist);
      bool End_AddVisitorList(IAsyncResult asyncResult);
      #endif
      bool UpdateVisitorList(VisitorList vlist);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateVisitorList(AsyncCallback callback, object state, VisitorList vlist);
      bool End_UpdateVisitorList(IAsyncResult asyncResult);
      #endif
      List<VisitorList> GetVisitorLists(string vl_id, long vl_in_time, long vl_out_time);
      #if SILVERLIGHT
      IAsyncResult Begin_GetVisitorLists(AsyncCallback callback, object state, string vl_id, long vl_in_time, long vl_out_time);
      List<VisitorList> End_GetVisitorLists(IAsyncResult asyncResult);
      #endif
      bool DeleteVisitorList(string vl_id);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteVisitorList(AsyncCallback callback, object state, string vl_id);
      bool End_DeleteVisitorList(IAsyncResult asyncResult);
      #endif
      bool AddVisitor(List<Visitor> visitors);
      #if SILVERLIGHT
      IAsyncResult Begin_AddVisitor(AsyncCallback callback, object state, List<Visitor> visitors);
      bool End_AddVisitor(IAsyncResult asyncResult);
      #endif
      bool UpdateVisitor(Visitor visitor);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateVisitor(AsyncCallback callback, object state, Visitor visitor);
      bool End_UpdateVisitor(IAsyncResult asyncResult);
      #endif
      List<Visitor> GetVisitors(string vt_id, string vt_vl_id, string name, IdentifyType identify_type, string tmpcard_no, string vt_identify_NO, long in_time, long out_time, Status status, string dep_id, string emp_id);
      #if SILVERLIGHT
      IAsyncResult Begin_GetVisitors(AsyncCallback callback, object state, string vt_id, string vt_vl_id, string name, IdentifyType identify_type, string tmpcard_no, string vt_identify_NO, long in_time, long out_time, Status status, string dep_id, string emp_id);
      List<Visitor> End_GetVisitors(IAsyncResult asyncResult);
      #endif
      bool DeleteVisitor(string vt_id);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteVisitor(AsyncCallback callback, object state, string vt_id);
      bool End_DeleteVisitor(IAsyncResult asyncResult);
      #endif
      bool BlackListOprator(DbOprator dboprator, BlackList blacklist);
      #if SILVERLIGHT
      IAsyncResult Begin_BlackListOprator(AsyncCallback callback, object state, DbOprator dboprator, BlackList blacklist);
      bool End_BlackListOprator(IAsyncResult asyncResult);
      #endif
      List<BlackList> GetBlackList(string bl_id, IdentifyType identify_type, string bl_identify_NO, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_GetBlackList(AsyncCallback callback, object state, string bl_id, IdentifyType identify_type, string bl_identify_NO, string name);
      List<BlackList> End_GetBlackList(IAsyncResult asyncResult);
      #endif
      string UploadImg2Bimg(byte[] imgBytes);
      #if SILVERLIGHT
      IAsyncResult Begin_UploadImg2Bimg(AsyncCallback callback, object state, byte[] imgBytes);
      string End_UploadImg2Bimg(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetReaders(AsyncCallback callback, object state)
      {
        return send_GetReaders(callback, state);
      }

      public List<ReaderList> End_GetReaders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetReaders();
      }

      #endif

      public List<ReaderList> GetReaders()
      {
        #if !SILVERLIGHT
        send_GetReaders();
        return recv_GetReaders();

        #else
        var asyncResult = Begin_GetReaders(null, null);
        return End_GetReaders(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetReaders(AsyncCallback callback, object state)
      #else
      public void send_GetReaders()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetReaders", TMessageType.Call, seqid_));
        GetReaders_args args = new GetReaders_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ReaderList> recv_GetReaders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetReaders_result result = new GetReaders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetReaders failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetVisitorReader(AsyncCallback callback, object state, List<ReaderList> readers)
      {
        return send_SetVisitorReader(callback, state, readers);
      }

      public bool End_SetVisitorReader(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetVisitorReader();
      }

      #endif

      public bool SetVisitorReader(List<ReaderList> readers)
      {
        #if !SILVERLIGHT
        send_SetVisitorReader(readers);
        return recv_SetVisitorReader();

        #else
        var asyncResult = Begin_SetVisitorReader(null, null, readers);
        return End_SetVisitorReader(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetVisitorReader(AsyncCallback callback, object state, List<ReaderList> readers)
      #else
      public void send_SetVisitorReader(List<ReaderList> readers)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetVisitorReader", TMessageType.Call, seqid_));
        SetVisitorReader_args args = new SetVisitorReader_args();
        args.Readers = readers;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_SetVisitorReader()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetVisitorReader_result result = new SetVisitorReader_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetVisitorReader failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetFaceReader(AsyncCallback callback, object state, List<ReaderList> readers)
      {
        return send_SetFaceReader(callback, state, readers);
      }

      public bool End_SetFaceReader(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetFaceReader();
      }

      #endif

      public bool SetFaceReader(List<ReaderList> readers)
      {
        #if !SILVERLIGHT
        send_SetFaceReader(readers);
        return recv_SetFaceReader();

        #else
        var asyncResult = Begin_SetFaceReader(null, null, readers);
        return End_SetFaceReader(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetFaceReader(AsyncCallback callback, object state, List<ReaderList> readers)
      #else
      public void send_SetFaceReader(List<ReaderList> readers)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetFaceReader", TMessageType.Call, seqid_));
        SetFaceReader_args args = new SetFaceReader_args();
        args.Readers = readers;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_SetFaceReader()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetFaceReader_result result = new SetFaceReader_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetFaceReader failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AdrelationOprator(AsyncCallback callback, object state, DbOprator dboprator, Adrelation adrelation)
      {
        return send_AdrelationOprator(callback, state, dboprator, adrelation);
      }

      public bool End_AdrelationOprator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AdrelationOprator();
      }

      #endif

      public bool AdrelationOprator(DbOprator dboprator, Adrelation adrelation)
      {
        #if !SILVERLIGHT
        send_AdrelationOprator(dboprator, adrelation);
        return recv_AdrelationOprator();

        #else
        var asyncResult = Begin_AdrelationOprator(null, null, dboprator, adrelation);
        return End_AdrelationOprator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AdrelationOprator(AsyncCallback callback, object state, DbOprator dboprator, Adrelation adrelation)
      #else
      public void send_AdrelationOprator(DbOprator dboprator, Adrelation adrelation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AdrelationOprator", TMessageType.Call, seqid_));
        AdrelationOprator_args args = new AdrelationOprator_args();
        args.Dboprator = dboprator;
        args.Adrelation = adrelation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_AdrelationOprator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AdrelationOprator_result result = new AdrelationOprator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AdrelationOprator failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAdralations(AsyncCallback callback, object state, string id, string lnl_id, string name)
      {
        return send_GetAdralations(callback, state, id, lnl_id, name);
      }

      public List<Adrelation> End_GetAdralations(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAdralations();
      }

      #endif

      public List<Adrelation> GetAdralations(string id, string lnl_id, string name)
      {
        #if !SILVERLIGHT
        send_GetAdralations(id, lnl_id, name);
        return recv_GetAdralations();

        #else
        var asyncResult = Begin_GetAdralations(null, null, id, lnl_id, name);
        return End_GetAdralations(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAdralations(AsyncCallback callback, object state, string id, string lnl_id, string name)
      #else
      public void send_GetAdralations(string id, string lnl_id, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAdralations", TMessageType.Call, seqid_));
        GetAdralations_args args = new GetAdralations_args();
        args.Id = id;
        args.Lnl_id = lnl_id;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Adrelation> recv_GetAdralations()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAdralations_result result = new GetAdralations_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAdralations failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DepartmentOprator(AsyncCallback callback, object state, DbOprator dboprator, Department department)
      {
        return send_DepartmentOprator(callback, state, dboprator, department);
      }

      public bool End_DepartmentOprator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DepartmentOprator();
      }

      #endif

      public bool DepartmentOprator(DbOprator dboprator, Department department)
      {
        #if !SILVERLIGHT
        send_DepartmentOprator(dboprator, department);
        return recv_DepartmentOprator();

        #else
        var asyncResult = Begin_DepartmentOprator(null, null, dboprator, department);
        return End_DepartmentOprator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DepartmentOprator(AsyncCallback callback, object state, DbOprator dboprator, Department department)
      #else
      public void send_DepartmentOprator(DbOprator dboprator, Department department)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DepartmentOprator", TMessageType.Call, seqid_));
        DepartmentOprator_args args = new DepartmentOprator_args();
        args.Dboprator = dboprator;
        args.Department = department;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DepartmentOprator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DepartmentOprator_result result = new DepartmentOprator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DepartmentOprator failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDepartments(AsyncCallback callback, object state, string ad_id, string id, string lnl_id, string name)
      {
        return send_GetDepartments(callback, state, ad_id, id, lnl_id, name);
      }

      public List<Department> End_GetDepartments(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDepartments();
      }

      #endif

      public List<Department> GetDepartments(string ad_id, string id, string lnl_id, string name)
      {
        #if !SILVERLIGHT
        send_GetDepartments(ad_id, id, lnl_id, name);
        return recv_GetDepartments();

        #else
        var asyncResult = Begin_GetDepartments(null, null, ad_id, id, lnl_id, name);
        return End_GetDepartments(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDepartments(AsyncCallback callback, object state, string ad_id, string id, string lnl_id, string name)
      #else
      public void send_GetDepartments(string ad_id, string id, string lnl_id, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDepartments", TMessageType.Call, seqid_));
        GetDepartments_args args = new GetDepartments_args();
        args.Ad_id = ad_id;
        args.Id = id;
        args.Lnl_id = lnl_id;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Department> recv_GetDepartments()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDepartments_result result = new GetDepartments_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDepartments failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EmployeeOprator(AsyncCallback callback, object state, DbOprator dboprator, Employee employee)
      {
        return send_EmployeeOprator(callback, state, dboprator, employee);
      }

      public bool End_EmployeeOprator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EmployeeOprator();
      }

      #endif

      public bool EmployeeOprator(DbOprator dboprator, Employee employee)
      {
        #if !SILVERLIGHT
        send_EmployeeOprator(dboprator, employee);
        return recv_EmployeeOprator();

        #else
        var asyncResult = Begin_EmployeeOprator(null, null, dboprator, employee);
        return End_EmployeeOprator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EmployeeOprator(AsyncCallback callback, object state, DbOprator dboprator, Employee employee)
      #else
      public void send_EmployeeOprator(DbOprator dboprator, Employee employee)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EmployeeOprator", TMessageType.Call, seqid_));
        EmployeeOprator_args args = new EmployeeOprator_args();
        args.Dboprator = dboprator;
        args.Employee = employee;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_EmployeeOprator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EmployeeOprator_result result = new EmployeeOprator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EmployeeOprator failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetEmployees(AsyncCallback callback, object state, string dep_id, string id, string lnl_id, string name, string card_NO)
      {
        return send_GetEmployees(callback, state, dep_id, id, lnl_id, name, card_NO);
      }

      public List<Employee> End_GetEmployees(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetEmployees();
      }

      #endif

      public List<Employee> GetEmployees(string dep_id, string id, string lnl_id, string name, string card_NO)
      {
        #if !SILVERLIGHT
        send_GetEmployees(dep_id, id, lnl_id, name, card_NO);
        return recv_GetEmployees();

        #else
        var asyncResult = Begin_GetEmployees(null, null, dep_id, id, lnl_id, name, card_NO);
        return End_GetEmployees(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetEmployees(AsyncCallback callback, object state, string dep_id, string id, string lnl_id, string name, string card_NO)
      #else
      public void send_GetEmployees(string dep_id, string id, string lnl_id, string name, string card_NO)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetEmployees", TMessageType.Call, seqid_));
        GetEmployees_args args = new GetEmployees_args();
        args.Dep_id = dep_id;
        args.Id = id;
        args.Lnl_id = lnl_id;
        args.Name = name;
        args.Card_NO = card_NO;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Employee> recv_GetEmployees()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetEmployees_result result = new GetEmployees_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetEmployees failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddVisitorList(AsyncCallback callback, object state, VisitorList vlist)
      {
        return send_AddVisitorList(callback, state, vlist);
      }

      public bool End_AddVisitorList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddVisitorList();
      }

      #endif

      public bool AddVisitorList(VisitorList vlist)
      {
        #if !SILVERLIGHT
        send_AddVisitorList(vlist);
        return recv_AddVisitorList();

        #else
        var asyncResult = Begin_AddVisitorList(null, null, vlist);
        return End_AddVisitorList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddVisitorList(AsyncCallback callback, object state, VisitorList vlist)
      #else
      public void send_AddVisitorList(VisitorList vlist)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddVisitorList", TMessageType.Call, seqid_));
        AddVisitorList_args args = new AddVisitorList_args();
        args.Vlist = vlist;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_AddVisitorList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddVisitorList_result result = new AddVisitorList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddVisitorList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateVisitorList(AsyncCallback callback, object state, VisitorList vlist)
      {
        return send_UpdateVisitorList(callback, state, vlist);
      }

      public bool End_UpdateVisitorList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateVisitorList();
      }

      #endif

      public bool UpdateVisitorList(VisitorList vlist)
      {
        #if !SILVERLIGHT
        send_UpdateVisitorList(vlist);
        return recv_UpdateVisitorList();

        #else
        var asyncResult = Begin_UpdateVisitorList(null, null, vlist);
        return End_UpdateVisitorList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateVisitorList(AsyncCallback callback, object state, VisitorList vlist)
      #else
      public void send_UpdateVisitorList(VisitorList vlist)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateVisitorList", TMessageType.Call, seqid_));
        UpdateVisitorList_args args = new UpdateVisitorList_args();
        args.Vlist = vlist;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_UpdateVisitorList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateVisitorList_result result = new UpdateVisitorList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateVisitorList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetVisitorLists(AsyncCallback callback, object state, string vl_id, long vl_in_time, long vl_out_time)
      {
        return send_GetVisitorLists(callback, state, vl_id, vl_in_time, vl_out_time);
      }

      public List<VisitorList> End_GetVisitorLists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetVisitorLists();
      }

      #endif

      public List<VisitorList> GetVisitorLists(string vl_id, long vl_in_time, long vl_out_time)
      {
        #if !SILVERLIGHT
        send_GetVisitorLists(vl_id, vl_in_time, vl_out_time);
        return recv_GetVisitorLists();

        #else
        var asyncResult = Begin_GetVisitorLists(null, null, vl_id, vl_in_time, vl_out_time);
        return End_GetVisitorLists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetVisitorLists(AsyncCallback callback, object state, string vl_id, long vl_in_time, long vl_out_time)
      #else
      public void send_GetVisitorLists(string vl_id, long vl_in_time, long vl_out_time)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetVisitorLists", TMessageType.Call, seqid_));
        GetVisitorLists_args args = new GetVisitorLists_args();
        args.Vl_id = vl_id;
        args.Vl_in_time = vl_in_time;
        args.Vl_out_time = vl_out_time;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<VisitorList> recv_GetVisitorLists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetVisitorLists_result result = new GetVisitorLists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVisitorLists failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteVisitorList(AsyncCallback callback, object state, string vl_id)
      {
        return send_DeleteVisitorList(callback, state, vl_id);
      }

      public bool End_DeleteVisitorList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteVisitorList();
      }

      #endif

      public bool DeleteVisitorList(string vl_id)
      {
        #if !SILVERLIGHT
        send_DeleteVisitorList(vl_id);
        return recv_DeleteVisitorList();

        #else
        var asyncResult = Begin_DeleteVisitorList(null, null, vl_id);
        return End_DeleteVisitorList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteVisitorList(AsyncCallback callback, object state, string vl_id)
      #else
      public void send_DeleteVisitorList(string vl_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteVisitorList", TMessageType.Call, seqid_));
        DeleteVisitorList_args args = new DeleteVisitorList_args();
        args.Vl_id = vl_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DeleteVisitorList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteVisitorList_result result = new DeleteVisitorList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteVisitorList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddVisitor(AsyncCallback callback, object state, List<Visitor> visitors)
      {
        return send_AddVisitor(callback, state, visitors);
      }

      public bool End_AddVisitor(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddVisitor();
      }

      #endif

      public bool AddVisitor(List<Visitor> visitors)
      {
        #if !SILVERLIGHT
        send_AddVisitor(visitors);
        return recv_AddVisitor();

        #else
        var asyncResult = Begin_AddVisitor(null, null, visitors);
        return End_AddVisitor(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddVisitor(AsyncCallback callback, object state, List<Visitor> visitors)
      #else
      public void send_AddVisitor(List<Visitor> visitors)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddVisitor", TMessageType.Call, seqid_));
        AddVisitor_args args = new AddVisitor_args();
        args.Visitors = visitors;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_AddVisitor()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddVisitor_result result = new AddVisitor_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddVisitor failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateVisitor(AsyncCallback callback, object state, Visitor visitor)
      {
        return send_UpdateVisitor(callback, state, visitor);
      }

      public bool End_UpdateVisitor(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateVisitor();
      }

      #endif

      public bool UpdateVisitor(Visitor visitor)
      {
        #if !SILVERLIGHT
        send_UpdateVisitor(visitor);
        return recv_UpdateVisitor();

        #else
        var asyncResult = Begin_UpdateVisitor(null, null, visitor);
        return End_UpdateVisitor(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateVisitor(AsyncCallback callback, object state, Visitor visitor)
      #else
      public void send_UpdateVisitor(Visitor visitor)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateVisitor", TMessageType.Call, seqid_));
        UpdateVisitor_args args = new UpdateVisitor_args();
        args.Visitor = visitor;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_UpdateVisitor()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateVisitor_result result = new UpdateVisitor_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateVisitor failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetVisitors(AsyncCallback callback, object state, string vt_id, string vt_vl_id, string name, IdentifyType identify_type, string tmpcard_no, string vt_identify_NO, long in_time, long out_time, Status status, string dep_id, string emp_id)
      {
        return send_GetVisitors(callback, state, vt_id, vt_vl_id, name, identify_type, tmpcard_no, vt_identify_NO, in_time, out_time, status, dep_id, emp_id);
      }

      public List<Visitor> End_GetVisitors(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetVisitors();
      }

      #endif

      public List<Visitor> GetVisitors(string vt_id, string vt_vl_id, string name, IdentifyType identify_type, string tmpcard_no, string vt_identify_NO, long in_time, long out_time, Status status, string dep_id, string emp_id)
      {
        #if !SILVERLIGHT
        send_GetVisitors(vt_id, vt_vl_id, name, identify_type, tmpcard_no, vt_identify_NO, in_time, out_time, status, dep_id, emp_id);
        return recv_GetVisitors();

        #else
        var asyncResult = Begin_GetVisitors(null, null, vt_id, vt_vl_id, name, identify_type, tmpcard_no, vt_identify_NO, in_time, out_time, status, dep_id, emp_id);
        return End_GetVisitors(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetVisitors(AsyncCallback callback, object state, string vt_id, string vt_vl_id, string name, IdentifyType identify_type, string tmpcard_no, string vt_identify_NO, long in_time, long out_time, Status status, string dep_id, string emp_id)
      #else
      public void send_GetVisitors(string vt_id, string vt_vl_id, string name, IdentifyType identify_type, string tmpcard_no, string vt_identify_NO, long in_time, long out_time, Status status, string dep_id, string emp_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetVisitors", TMessageType.Call, seqid_));
        GetVisitors_args args = new GetVisitors_args();
        args.Vt_id = vt_id;
        args.Vt_vl_id = vt_vl_id;
        args.Name = name;
        args.Identify_type = identify_type;
        args.Tmpcard_no = tmpcard_no;
        args.Vt_identify_NO = vt_identify_NO;
        args.In_time = in_time;
        args.Out_time = out_time;
        args.Status = status;
        args.Dep_id = dep_id;
        args.Emp_id = emp_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Visitor> recv_GetVisitors()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetVisitors_result result = new GetVisitors_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVisitors failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteVisitor(AsyncCallback callback, object state, string vt_id)
      {
        return send_DeleteVisitor(callback, state, vt_id);
      }

      public bool End_DeleteVisitor(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteVisitor();
      }

      #endif

      public bool DeleteVisitor(string vt_id)
      {
        #if !SILVERLIGHT
        send_DeleteVisitor(vt_id);
        return recv_DeleteVisitor();

        #else
        var asyncResult = Begin_DeleteVisitor(null, null, vt_id);
        return End_DeleteVisitor(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteVisitor(AsyncCallback callback, object state, string vt_id)
      #else
      public void send_DeleteVisitor(string vt_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteVisitor", TMessageType.Call, seqid_));
        DeleteVisitor_args args = new DeleteVisitor_args();
        args.Vt_id = vt_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DeleteVisitor()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteVisitor_result result = new DeleteVisitor_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteVisitor failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BlackListOprator(AsyncCallback callback, object state, DbOprator dboprator, BlackList blacklist)
      {
        return send_BlackListOprator(callback, state, dboprator, blacklist);
      }

      public bool End_BlackListOprator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BlackListOprator();
      }

      #endif

      public bool BlackListOprator(DbOprator dboprator, BlackList blacklist)
      {
        #if !SILVERLIGHT
        send_BlackListOprator(dboprator, blacklist);
        return recv_BlackListOprator();

        #else
        var asyncResult = Begin_BlackListOprator(null, null, dboprator, blacklist);
        return End_BlackListOprator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BlackListOprator(AsyncCallback callback, object state, DbOprator dboprator, BlackList blacklist)
      #else
      public void send_BlackListOprator(DbOprator dboprator, BlackList blacklist)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BlackListOprator", TMessageType.Call, seqid_));
        BlackListOprator_args args = new BlackListOprator_args();
        args.Dboprator = dboprator;
        args.Blacklist = blacklist;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_BlackListOprator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BlackListOprator_result result = new BlackListOprator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BlackListOprator failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBlackList(AsyncCallback callback, object state, string bl_id, IdentifyType identify_type, string bl_identify_NO, string name)
      {
        return send_GetBlackList(callback, state, bl_id, identify_type, bl_identify_NO, name);
      }

      public List<BlackList> End_GetBlackList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBlackList();
      }

      #endif

      public List<BlackList> GetBlackList(string bl_id, IdentifyType identify_type, string bl_identify_NO, string name)
      {
        #if !SILVERLIGHT
        send_GetBlackList(bl_id, identify_type, bl_identify_NO, name);
        return recv_GetBlackList();

        #else
        var asyncResult = Begin_GetBlackList(null, null, bl_id, identify_type, bl_identify_NO, name);
        return End_GetBlackList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBlackList(AsyncCallback callback, object state, string bl_id, IdentifyType identify_type, string bl_identify_NO, string name)
      #else
      public void send_GetBlackList(string bl_id, IdentifyType identify_type, string bl_identify_NO, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBlackList", TMessageType.Call, seqid_));
        GetBlackList_args args = new GetBlackList_args();
        args.Bl_id = bl_id;
        args.Identify_type = identify_type;
        args.Bl_identify_NO = bl_identify_NO;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<BlackList> recv_GetBlackList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBlackList_result result = new GetBlackList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBlackList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UploadImg2Bimg(AsyncCallback callback, object state, byte[] imgBytes)
      {
        return send_UploadImg2Bimg(callback, state, imgBytes);
      }

      public string End_UploadImg2Bimg(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UploadImg2Bimg();
      }

      #endif

      public string UploadImg2Bimg(byte[] imgBytes)
      {
        #if !SILVERLIGHT
        send_UploadImg2Bimg(imgBytes);
        return recv_UploadImg2Bimg();

        #else
        var asyncResult = Begin_UploadImg2Bimg(null, null, imgBytes);
        return End_UploadImg2Bimg(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UploadImg2Bimg(AsyncCallback callback, object state, byte[] imgBytes)
      #else
      public void send_UploadImg2Bimg(byte[] imgBytes)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UploadImg2Bimg", TMessageType.Call, seqid_));
        UploadImg2Bimg_args args = new UploadImg2Bimg_args();
        args.ImgBytes = imgBytes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_UploadImg2Bimg()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UploadImg2Bimg_result result = new UploadImg2Bimg_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadImg2Bimg failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetReaders"] = GetReaders_Process;
        processMap_["SetVisitorReader"] = SetVisitorReader_Process;
        processMap_["SetFaceReader"] = SetFaceReader_Process;
        processMap_["AdrelationOprator"] = AdrelationOprator_Process;
        processMap_["GetAdralations"] = GetAdralations_Process;
        processMap_["DepartmentOprator"] = DepartmentOprator_Process;
        processMap_["GetDepartments"] = GetDepartments_Process;
        processMap_["EmployeeOprator"] = EmployeeOprator_Process;
        processMap_["GetEmployees"] = GetEmployees_Process;
        processMap_["AddVisitorList"] = AddVisitorList_Process;
        processMap_["UpdateVisitorList"] = UpdateVisitorList_Process;
        processMap_["GetVisitorLists"] = GetVisitorLists_Process;
        processMap_["DeleteVisitorList"] = DeleteVisitorList_Process;
        processMap_["AddVisitor"] = AddVisitor_Process;
        processMap_["UpdateVisitor"] = UpdateVisitor_Process;
        processMap_["GetVisitors"] = GetVisitors_Process;
        processMap_["DeleteVisitor"] = DeleteVisitor_Process;
        processMap_["BlackListOprator"] = BlackListOprator_Process;
        processMap_["GetBlackList"] = GetBlackList_Process;
        processMap_["UploadImg2Bimg"] = UploadImg2Bimg_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetReaders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetReaders_args args = new GetReaders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetReaders_result result = new GetReaders_result();
        result.Success = iface_.GetReaders();
        oprot.WriteMessageBegin(new TMessage("GetReaders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetVisitorReader_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetVisitorReader_args args = new SetVisitorReader_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetVisitorReader_result result = new SetVisitorReader_result();
        result.Success = iface_.SetVisitorReader(args.Readers);
        oprot.WriteMessageBegin(new TMessage("SetVisitorReader", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetFaceReader_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetFaceReader_args args = new SetFaceReader_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetFaceReader_result result = new SetFaceReader_result();
        result.Success = iface_.SetFaceReader(args.Readers);
        oprot.WriteMessageBegin(new TMessage("SetFaceReader", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AdrelationOprator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AdrelationOprator_args args = new AdrelationOprator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AdrelationOprator_result result = new AdrelationOprator_result();
        result.Success = iface_.AdrelationOprator(args.Dboprator, args.Adrelation);
        oprot.WriteMessageBegin(new TMessage("AdrelationOprator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAdralations_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAdralations_args args = new GetAdralations_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAdralations_result result = new GetAdralations_result();
        result.Success = iface_.GetAdralations(args.Id, args.Lnl_id, args.Name);
        oprot.WriteMessageBegin(new TMessage("GetAdralations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DepartmentOprator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DepartmentOprator_args args = new DepartmentOprator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DepartmentOprator_result result = new DepartmentOprator_result();
        result.Success = iface_.DepartmentOprator(args.Dboprator, args.Department);
        oprot.WriteMessageBegin(new TMessage("DepartmentOprator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDepartments_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDepartments_args args = new GetDepartments_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDepartments_result result = new GetDepartments_result();
        result.Success = iface_.GetDepartments(args.Ad_id, args.Id, args.Lnl_id, args.Name);
        oprot.WriteMessageBegin(new TMessage("GetDepartments", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EmployeeOprator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EmployeeOprator_args args = new EmployeeOprator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EmployeeOprator_result result = new EmployeeOprator_result();
        result.Success = iface_.EmployeeOprator(args.Dboprator, args.Employee);
        oprot.WriteMessageBegin(new TMessage("EmployeeOprator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetEmployees_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetEmployees_args args = new GetEmployees_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetEmployees_result result = new GetEmployees_result();
        result.Success = iface_.GetEmployees(args.Dep_id, args.Id, args.Lnl_id, args.Name, args.Card_NO);
        oprot.WriteMessageBegin(new TMessage("GetEmployees", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddVisitorList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddVisitorList_args args = new AddVisitorList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddVisitorList_result result = new AddVisitorList_result();
        result.Success = iface_.AddVisitorList(args.Vlist);
        oprot.WriteMessageBegin(new TMessage("AddVisitorList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateVisitorList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateVisitorList_args args = new UpdateVisitorList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateVisitorList_result result = new UpdateVisitorList_result();
        result.Success = iface_.UpdateVisitorList(args.Vlist);
        oprot.WriteMessageBegin(new TMessage("UpdateVisitorList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetVisitorLists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetVisitorLists_args args = new GetVisitorLists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetVisitorLists_result result = new GetVisitorLists_result();
        result.Success = iface_.GetVisitorLists(args.Vl_id, args.Vl_in_time, args.Vl_out_time);
        oprot.WriteMessageBegin(new TMessage("GetVisitorLists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteVisitorList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteVisitorList_args args = new DeleteVisitorList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteVisitorList_result result = new DeleteVisitorList_result();
        result.Success = iface_.DeleteVisitorList(args.Vl_id);
        oprot.WriteMessageBegin(new TMessage("DeleteVisitorList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddVisitor_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddVisitor_args args = new AddVisitor_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddVisitor_result result = new AddVisitor_result();
        result.Success = iface_.AddVisitor(args.Visitors);
        oprot.WriteMessageBegin(new TMessage("AddVisitor", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateVisitor_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateVisitor_args args = new UpdateVisitor_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateVisitor_result result = new UpdateVisitor_result();
        result.Success = iface_.UpdateVisitor(args.Visitor);
        oprot.WriteMessageBegin(new TMessage("UpdateVisitor", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetVisitors_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetVisitors_args args = new GetVisitors_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetVisitors_result result = new GetVisitors_result();
        result.Success = iface_.GetVisitors(args.Vt_id, args.Vt_vl_id, args.Name, args.Identify_type, args.Tmpcard_no, args.Vt_identify_NO, args.In_time, args.Out_time, args.Status, args.Dep_id, args.Emp_id);
        oprot.WriteMessageBegin(new TMessage("GetVisitors", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteVisitor_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteVisitor_args args = new DeleteVisitor_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteVisitor_result result = new DeleteVisitor_result();
        result.Success = iface_.DeleteVisitor(args.Vt_id);
        oprot.WriteMessageBegin(new TMessage("DeleteVisitor", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BlackListOprator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BlackListOprator_args args = new BlackListOprator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BlackListOprator_result result = new BlackListOprator_result();
        result.Success = iface_.BlackListOprator(args.Dboprator, args.Blacklist);
        oprot.WriteMessageBegin(new TMessage("BlackListOprator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBlackList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBlackList_args args = new GetBlackList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBlackList_result result = new GetBlackList_result();
        result.Success = iface_.GetBlackList(args.Bl_id, args.Identify_type, args.Bl_identify_NO, args.Name);
        oprot.WriteMessageBegin(new TMessage("GetBlackList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UploadImg2Bimg_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UploadImg2Bimg_args args = new UploadImg2Bimg_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UploadImg2Bimg_result result = new UploadImg2Bimg_result();
        result.Success = iface_.UploadImg2Bimg(args.ImgBytes);
        oprot.WriteMessageBegin(new TMessage("UploadImg2Bimg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReaders_args : TBase
    {

      public GetReaders_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetReaders_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetReaders_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReaders_result : TBase
    {
      private List<ReaderList> _success;

      public List<ReaderList> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetReaders_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<ReaderList>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      ReaderList _elem2;
                      _elem2 = new ReaderList();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetReaders_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (ReaderList _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetReaders_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetVisitorReader_args : TBase
    {
      private List<ReaderList> _readers;

      public List<ReaderList> Readers
      {
        get
        {
          return _readers;
        }
        set
        {
          __isset.readers = true;
          this._readers = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool readers;
      }

      public SetVisitorReader_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Readers = new List<ReaderList>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      ReaderList _elem6;
                      _elem6 = new ReaderList();
                      _elem6.Read(iprot);
                      Readers.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetVisitorReader_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Readers != null && __isset.readers) {
            field.Name = "readers";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Readers.Count));
              foreach (ReaderList _iter7 in Readers)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetVisitorReader_args(");
        bool __first = true;
        if (Readers != null && __isset.readers) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Readers: ");
          __sb.Append(Readers);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetVisitorReader_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetVisitorReader_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetVisitorReader_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetVisitorReader_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetFaceReader_args : TBase
    {
      private List<ReaderList> _readers;

      public List<ReaderList> Readers
      {
        get
        {
          return _readers;
        }
        set
        {
          __isset.readers = true;
          this._readers = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool readers;
      }

      public SetFaceReader_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Readers = new List<ReaderList>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      ReaderList _elem10;
                      _elem10 = new ReaderList();
                      _elem10.Read(iprot);
                      Readers.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetFaceReader_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Readers != null && __isset.readers) {
            field.Name = "readers";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Readers.Count));
              foreach (ReaderList _iter11 in Readers)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetFaceReader_args(");
        bool __first = true;
        if (Readers != null && __isset.readers) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Readers: ");
          __sb.Append(Readers);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetFaceReader_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetFaceReader_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetFaceReader_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetFaceReader_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AdrelationOprator_args : TBase
    {
      private DbOprator _dboprator;
      private Adrelation _adrelation;

      /// <summary>
      /// 
      /// <seealso cref="DbOprator"/>
      /// </summary>
      public DbOprator Dboprator
      {
        get
        {
          return _dboprator;
        }
        set
        {
          __isset.dboprator = true;
          this._dboprator = value;
        }
      }

      public Adrelation Adrelation
      {
        get
        {
          return _adrelation;
        }
        set
        {
          __isset.adrelation = true;
          this._adrelation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dboprator;
        public bool adrelation;
      }

      public AdrelationOprator_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Dboprator = (DbOprator)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Adrelation = new Adrelation();
                  Adrelation.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AdrelationOprator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.dboprator) {
            field.Name = "dboprator";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Dboprator);
            oprot.WriteFieldEnd();
          }
          if (Adrelation != null && __isset.adrelation) {
            field.Name = "adrelation";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Adrelation.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AdrelationOprator_args(");
        bool __first = true;
        if (__isset.dboprator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dboprator: ");
          __sb.Append(Dboprator);
        }
        if (Adrelation != null && __isset.adrelation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Adrelation: ");
          __sb.Append(Adrelation== null ? "<null>" : Adrelation.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AdrelationOprator_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AdrelationOprator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AdrelationOprator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AdrelationOprator_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAdralations_args : TBase
    {
      private string _id;
      private string _lnl_id;
      private string _name;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string Lnl_id
      {
        get
        {
          return _lnl_id;
        }
        set
        {
          __isset.lnl_id = true;
          this._lnl_id = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool lnl_id;
        public bool name;
      }

      public GetAdralations_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Lnl_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAdralations_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          if (Lnl_id != null && __isset.lnl_id) {
            field.Name = "lnl_id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lnl_id);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAdralations_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        if (Lnl_id != null && __isset.lnl_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lnl_id: ");
          __sb.Append(Lnl_id);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAdralations_result : TBase
    {
      private List<Adrelation> _success;

      public List<Adrelation> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAdralations_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Adrelation>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      Adrelation _elem14;
                      _elem14 = new Adrelation();
                      _elem14.Read(iprot);
                      Success.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAdralations_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Adrelation _iter15 in Success)
                {
                  _iter15.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAdralations_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DepartmentOprator_args : TBase
    {
      private DbOprator _dboprator;
      private Department _department;

      /// <summary>
      /// 
      /// <seealso cref="DbOprator"/>
      /// </summary>
      public DbOprator Dboprator
      {
        get
        {
          return _dboprator;
        }
        set
        {
          __isset.dboprator = true;
          this._dboprator = value;
        }
      }

      public Department Department
      {
        get
        {
          return _department;
        }
        set
        {
          __isset.department = true;
          this._department = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dboprator;
        public bool department;
      }

      public DepartmentOprator_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Dboprator = (DbOprator)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Department = new Department();
                  Department.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DepartmentOprator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.dboprator) {
            field.Name = "dboprator";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Dboprator);
            oprot.WriteFieldEnd();
          }
          if (Department != null && __isset.department) {
            field.Name = "department";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Department.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DepartmentOprator_args(");
        bool __first = true;
        if (__isset.dboprator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dboprator: ");
          __sb.Append(Dboprator);
        }
        if (Department != null && __isset.department) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Department: ");
          __sb.Append(Department== null ? "<null>" : Department.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DepartmentOprator_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DepartmentOprator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DepartmentOprator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DepartmentOprator_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDepartments_args : TBase
    {
      private string _ad_id;
      private string _id;
      private string _lnl_id;
      private string _name;

      public string Ad_id
      {
        get
        {
          return _ad_id;
        }
        set
        {
          __isset.ad_id = true;
          this._ad_id = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string Lnl_id
      {
        get
        {
          return _lnl_id;
        }
        set
        {
          __isset.lnl_id = true;
          this._lnl_id = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ad_id;
        public bool id;
        public bool lnl_id;
        public bool name;
      }

      public GetDepartments_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ad_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Lnl_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetDepartments_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ad_id != null && __isset.ad_id) {
            field.Name = "ad_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ad_id);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          if (Lnl_id != null && __isset.lnl_id) {
            field.Name = "lnl_id";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lnl_id);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDepartments_args(");
        bool __first = true;
        if (Ad_id != null && __isset.ad_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ad_id: ");
          __sb.Append(Ad_id);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        if (Lnl_id != null && __isset.lnl_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lnl_id: ");
          __sb.Append(Lnl_id);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDepartments_result : TBase
    {
      private List<Department> _success;

      public List<Department> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDepartments_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Department>();
                    TList _list16 = iprot.ReadListBegin();
                    for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      Department _elem18;
                      _elem18 = new Department();
                      _elem18.Read(iprot);
                      Success.Add(_elem18);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetDepartments_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Department _iter19 in Success)
                {
                  _iter19.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDepartments_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EmployeeOprator_args : TBase
    {
      private DbOprator _dboprator;
      private Employee _employee;

      /// <summary>
      /// 
      /// <seealso cref="DbOprator"/>
      /// </summary>
      public DbOprator Dboprator
      {
        get
        {
          return _dboprator;
        }
        set
        {
          __isset.dboprator = true;
          this._dboprator = value;
        }
      }

      public Employee Employee
      {
        get
        {
          return _employee;
        }
        set
        {
          __isset.employee = true;
          this._employee = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dboprator;
        public bool employee;
      }

      public EmployeeOprator_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Dboprator = (DbOprator)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Employee = new Employee();
                  Employee.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("EmployeeOprator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.dboprator) {
            field.Name = "dboprator";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Dboprator);
            oprot.WriteFieldEnd();
          }
          if (Employee != null && __isset.employee) {
            field.Name = "employee";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Employee.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("EmployeeOprator_args(");
        bool __first = true;
        if (__isset.dboprator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dboprator: ");
          __sb.Append(Dboprator);
        }
        if (Employee != null && __isset.employee) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employee: ");
          __sb.Append(Employee== null ? "<null>" : Employee.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EmployeeOprator_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EmployeeOprator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("EmployeeOprator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("EmployeeOprator_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetEmployees_args : TBase
    {
      private string _dep_id;
      private string _id;
      private string _lnl_id;
      private string _name;
      private string _card_NO;

      public string Dep_id
      {
        get
        {
          return _dep_id;
        }
        set
        {
          __isset.dep_id = true;
          this._dep_id = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string Lnl_id
      {
        get
        {
          return _lnl_id;
        }
        set
        {
          __isset.lnl_id = true;
          this._lnl_id = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Card_NO
      {
        get
        {
          return _card_NO;
        }
        set
        {
          __isset.card_NO = true;
          this._card_NO = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dep_id;
        public bool id;
        public bool lnl_id;
        public bool name;
        public bool card_NO;
      }

      public GetEmployees_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Dep_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Lnl_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Card_NO = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetEmployees_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Dep_id != null && __isset.dep_id) {
            field.Name = "dep_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Dep_id);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          if (Lnl_id != null && __isset.lnl_id) {
            field.Name = "lnl_id";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lnl_id);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Card_NO != null && __isset.card_NO) {
            field.Name = "card_NO";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Card_NO);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetEmployees_args(");
        bool __first = true;
        if (Dep_id != null && __isset.dep_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dep_id: ");
          __sb.Append(Dep_id);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        if (Lnl_id != null && __isset.lnl_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lnl_id: ");
          __sb.Append(Lnl_id);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Card_NO != null && __isset.card_NO) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Card_NO: ");
          __sb.Append(Card_NO);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetEmployees_result : TBase
    {
      private List<Employee> _success;

      public List<Employee> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetEmployees_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Employee>();
                    TList _list20 = iprot.ReadListBegin();
                    for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      Employee _elem22;
                      _elem22 = new Employee();
                      _elem22.Read(iprot);
                      Success.Add(_elem22);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetEmployees_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Employee _iter23 in Success)
                {
                  _iter23.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetEmployees_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddVisitorList_args : TBase
    {
      private VisitorList _vlist;

      public VisitorList Vlist
      {
        get
        {
          return _vlist;
        }
        set
        {
          __isset.vlist = true;
          this._vlist = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vlist;
      }

      public AddVisitorList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Vlist = new VisitorList();
                  Vlist.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AddVisitorList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Vlist != null && __isset.vlist) {
            field.Name = "vlist";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Vlist.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddVisitorList_args(");
        bool __first = true;
        if (Vlist != null && __isset.vlist) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vlist: ");
          __sb.Append(Vlist== null ? "<null>" : Vlist.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddVisitorList_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddVisitorList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AddVisitorList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddVisitorList_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateVisitorList_args : TBase
    {
      private VisitorList _vlist;

      public VisitorList Vlist
      {
        get
        {
          return _vlist;
        }
        set
        {
          __isset.vlist = true;
          this._vlist = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vlist;
      }

      public UpdateVisitorList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Vlist = new VisitorList();
                  Vlist.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateVisitorList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Vlist != null && __isset.vlist) {
            field.Name = "vlist";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Vlist.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateVisitorList_args(");
        bool __first = true;
        if (Vlist != null && __isset.vlist) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vlist: ");
          __sb.Append(Vlist== null ? "<null>" : Vlist.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateVisitorList_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdateVisitorList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateVisitorList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateVisitorList_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetVisitorLists_args : TBase
    {
      private string _vl_id;
      private long _vl_in_time;
      private long _vl_out_time;

      public string Vl_id
      {
        get
        {
          return _vl_id;
        }
        set
        {
          __isset.vl_id = true;
          this._vl_id = value;
        }
      }

      public long Vl_in_time
      {
        get
        {
          return _vl_in_time;
        }
        set
        {
          __isset.vl_in_time = true;
          this._vl_in_time = value;
        }
      }

      public long Vl_out_time
      {
        get
        {
          return _vl_out_time;
        }
        set
        {
          __isset.vl_out_time = true;
          this._vl_out_time = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vl_id;
        public bool vl_in_time;
        public bool vl_out_time;
      }

      public GetVisitorLists_args() {
        this._vl_in_time = 0;
        this.__isset.vl_in_time = true;
        this._vl_out_time = 0;
        this.__isset.vl_out_time = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Vl_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Vl_in_time = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Vl_out_time = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetVisitorLists_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Vl_id != null && __isset.vl_id) {
            field.Name = "vl_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Vl_id);
            oprot.WriteFieldEnd();
          }
          if (__isset.vl_in_time) {
            field.Name = "vl_in_time";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Vl_in_time);
            oprot.WriteFieldEnd();
          }
          if (__isset.vl_out_time) {
            field.Name = "vl_out_time";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Vl_out_time);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetVisitorLists_args(");
        bool __first = true;
        if (Vl_id != null && __isset.vl_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vl_id: ");
          __sb.Append(Vl_id);
        }
        if (__isset.vl_in_time) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vl_in_time: ");
          __sb.Append(Vl_in_time);
        }
        if (__isset.vl_out_time) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vl_out_time: ");
          __sb.Append(Vl_out_time);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetVisitorLists_result : TBase
    {
      private List<VisitorList> _success;

      public List<VisitorList> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetVisitorLists_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<VisitorList>();
                    TList _list24 = iprot.ReadListBegin();
                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                    {
                      VisitorList _elem26;
                      _elem26 = new VisitorList();
                      _elem26.Read(iprot);
                      Success.Add(_elem26);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetVisitorLists_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (VisitorList _iter27 in Success)
                {
                  _iter27.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetVisitorLists_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteVisitorList_args : TBase
    {
      private string _vl_id;

      public string Vl_id
      {
        get
        {
          return _vl_id;
        }
        set
        {
          __isset.vl_id = true;
          this._vl_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vl_id;
      }

      public DeleteVisitorList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Vl_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteVisitorList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Vl_id != null && __isset.vl_id) {
            field.Name = "vl_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Vl_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteVisitorList_args(");
        bool __first = true;
        if (Vl_id != null && __isset.vl_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vl_id: ");
          __sb.Append(Vl_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteVisitorList_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteVisitorList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteVisitorList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteVisitorList_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddVisitor_args : TBase
    {
      private List<Visitor> _visitors;

      public List<Visitor> Visitors
      {
        get
        {
          return _visitors;
        }
        set
        {
          __isset.visitors = true;
          this._visitors = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool visitors;
      }

      public AddVisitor_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Visitors = new List<Visitor>();
                    TList _list28 = iprot.ReadListBegin();
                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                    {
                      Visitor _elem30;
                      _elem30 = new Visitor();
                      _elem30.Read(iprot);
                      Visitors.Add(_elem30);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AddVisitor_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Visitors != null && __isset.visitors) {
            field.Name = "visitors";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Visitors.Count));
              foreach (Visitor _iter31 in Visitors)
              {
                _iter31.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddVisitor_args(");
        bool __first = true;
        if (Visitors != null && __isset.visitors) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Visitors: ");
          __sb.Append(Visitors);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddVisitor_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddVisitor_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AddVisitor_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddVisitor_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateVisitor_args : TBase
    {
      private Visitor _visitor;

      public Visitor Visitor
      {
        get
        {
          return _visitor;
        }
        set
        {
          __isset.visitor = true;
          this._visitor = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool visitor;
      }

      public UpdateVisitor_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Visitor = new Visitor();
                  Visitor.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateVisitor_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Visitor != null && __isset.visitor) {
            field.Name = "visitor";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Visitor.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateVisitor_args(");
        bool __first = true;
        if (Visitor != null && __isset.visitor) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Visitor: ");
          __sb.Append(Visitor== null ? "<null>" : Visitor.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateVisitor_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdateVisitor_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateVisitor_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateVisitor_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetVisitors_args : TBase
    {
      private string _vt_id;
      private string _vt_vl_id;
      private string _name;
      private IdentifyType _identify_type;
      private string _tmpcard_no;
      private string _vt_identify_NO;
      private long _in_time;
      private long _out_time;
      private Status _status;
      private string _dep_id;
      private string _emp_id;

      public string Vt_id
      {
        get
        {
          return _vt_id;
        }
        set
        {
          __isset.vt_id = true;
          this._vt_id = value;
        }
      }

      public string Vt_vl_id
      {
        get
        {
          return _vt_vl_id;
        }
        set
        {
          __isset.vt_vl_id = true;
          this._vt_vl_id = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="IdentifyType"/>
      /// </summary>
      public IdentifyType Identify_type
      {
        get
        {
          return _identify_type;
        }
        set
        {
          __isset.identify_type = true;
          this._identify_type = value;
        }
      }

      public string Tmpcard_no
      {
        get
        {
          return _tmpcard_no;
        }
        set
        {
          __isset.tmpcard_no = true;
          this._tmpcard_no = value;
        }
      }

      public string Vt_identify_NO
      {
        get
        {
          return _vt_identify_NO;
        }
        set
        {
          __isset.vt_identify_NO = true;
          this._vt_identify_NO = value;
        }
      }

      public long In_time
      {
        get
        {
          return _in_time;
        }
        set
        {
          __isset.in_time = true;
          this._in_time = value;
        }
      }

      public long Out_time
      {
        get
        {
          return _out_time;
        }
        set
        {
          __isset.out_time = true;
          this._out_time = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Status"/>
      /// </summary>
      public Status Status
      {
        get
        {
          return _status;
        }
        set
        {
          __isset.status = true;
          this._status = value;
        }
      }

      public string Dep_id
      {
        get
        {
          return _dep_id;
        }
        set
        {
          __isset.dep_id = true;
          this._dep_id = value;
        }
      }

      public string Emp_id
      {
        get
        {
          return _emp_id;
        }
        set
        {
          __isset.emp_id = true;
          this._emp_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vt_id;
        public bool vt_vl_id;
        public bool name;
        public bool identify_type;
        public bool tmpcard_no;
        public bool vt_identify_NO;
        public bool in_time;
        public bool out_time;
        public bool status;
        public bool dep_id;
        public bool emp_id;
      }

      public GetVisitors_args() {
        this._identify_type = IdentifyType.IdCard;
        this.__isset.identify_type = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Vt_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Vt_vl_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Identify_type = (IdentifyType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Tmpcard_no = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.String) {
                  Vt_identify_NO = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.I64) {
                  In_time = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 8:
                if (field.Type == TType.I64) {
                  Out_time = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 9:
                if (field.Type == TType.I32) {
                  Status = (Status)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 10:
                if (field.Type == TType.String) {
                  Dep_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 11:
                if (field.Type == TType.String) {
                  Emp_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetVisitors_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Vt_id != null && __isset.vt_id) {
            field.Name = "vt_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Vt_id);
            oprot.WriteFieldEnd();
          }
          if (Vt_vl_id != null && __isset.vt_vl_id) {
            field.Name = "vt_vl_id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Vt_vl_id);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (__isset.identify_type) {
            field.Name = "identify_type";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Identify_type);
            oprot.WriteFieldEnd();
          }
          if (Tmpcard_no != null && __isset.tmpcard_no) {
            field.Name = "tmpcard_no";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Tmpcard_no);
            oprot.WriteFieldEnd();
          }
          if (Vt_identify_NO != null && __isset.vt_identify_NO) {
            field.Name = "vt_identify_NO";
            field.Type = TType.String;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Vt_identify_NO);
            oprot.WriteFieldEnd();
          }
          if (__isset.in_time) {
            field.Name = "in_time";
            field.Type = TType.I64;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(In_time);
            oprot.WriteFieldEnd();
          }
          if (__isset.out_time) {
            field.Name = "out_time";
            field.Type = TType.I64;
            field.ID = 8;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Out_time);
            oprot.WriteFieldEnd();
          }
          if (__isset.status) {
            field.Name = "status";
            field.Type = TType.I32;
            field.ID = 9;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Status);
            oprot.WriteFieldEnd();
          }
          if (Dep_id != null && __isset.dep_id) {
            field.Name = "dep_id";
            field.Type = TType.String;
            field.ID = 10;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Dep_id);
            oprot.WriteFieldEnd();
          }
          if (Emp_id != null && __isset.emp_id) {
            field.Name = "emp_id";
            field.Type = TType.String;
            field.ID = 11;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Emp_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetVisitors_args(");
        bool __first = true;
        if (Vt_id != null && __isset.vt_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vt_id: ");
          __sb.Append(Vt_id);
        }
        if (Vt_vl_id != null && __isset.vt_vl_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vt_vl_id: ");
          __sb.Append(Vt_vl_id);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (__isset.identify_type) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Identify_type: ");
          __sb.Append(Identify_type);
        }
        if (Tmpcard_no != null && __isset.tmpcard_no) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Tmpcard_no: ");
          __sb.Append(Tmpcard_no);
        }
        if (Vt_identify_NO != null && __isset.vt_identify_NO) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vt_identify_NO: ");
          __sb.Append(Vt_identify_NO);
        }
        if (__isset.in_time) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("In_time: ");
          __sb.Append(In_time);
        }
        if (__isset.out_time) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Out_time: ");
          __sb.Append(Out_time);
        }
        if (__isset.status) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Status: ");
          __sb.Append(Status);
        }
        if (Dep_id != null && __isset.dep_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dep_id: ");
          __sb.Append(Dep_id);
        }
        if (Emp_id != null && __isset.emp_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Emp_id: ");
          __sb.Append(Emp_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetVisitors_result : TBase
    {
      private List<Visitor> _success;

      public List<Visitor> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetVisitors_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Visitor>();
                    TList _list32 = iprot.ReadListBegin();
                    for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                    {
                      Visitor _elem34;
                      _elem34 = new Visitor();
                      _elem34.Read(iprot);
                      Success.Add(_elem34);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetVisitors_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Visitor _iter35 in Success)
                {
                  _iter35.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetVisitors_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteVisitor_args : TBase
    {
      private string _vt_id;

      public string Vt_id
      {
        get
        {
          return _vt_id;
        }
        set
        {
          __isset.vt_id = true;
          this._vt_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vt_id;
      }

      public DeleteVisitor_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Vt_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteVisitor_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Vt_id != null && __isset.vt_id) {
            field.Name = "vt_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Vt_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteVisitor_args(");
        bool __first = true;
        if (Vt_id != null && __isset.vt_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vt_id: ");
          __sb.Append(Vt_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteVisitor_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteVisitor_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteVisitor_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteVisitor_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BlackListOprator_args : TBase
    {
      private DbOprator _dboprator;
      private BlackList _blacklist;

      /// <summary>
      /// 
      /// <seealso cref="DbOprator"/>
      /// </summary>
      public DbOprator Dboprator
      {
        get
        {
          return _dboprator;
        }
        set
        {
          __isset.dboprator = true;
          this._dboprator = value;
        }
      }

      public BlackList Blacklist
      {
        get
        {
          return _blacklist;
        }
        set
        {
          __isset.blacklist = true;
          this._blacklist = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dboprator;
        public bool blacklist;
      }

      public BlackListOprator_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Dboprator = (DbOprator)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Blacklist = new BlackList();
                  Blacklist.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BlackListOprator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.dboprator) {
            field.Name = "dboprator";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Dboprator);
            oprot.WriteFieldEnd();
          }
          if (Blacklist != null && __isset.blacklist) {
            field.Name = "blacklist";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Blacklist.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BlackListOprator_args(");
        bool __first = true;
        if (__isset.dboprator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dboprator: ");
          __sb.Append(Dboprator);
        }
        if (Blacklist != null && __isset.blacklist) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Blacklist: ");
          __sb.Append(Blacklist== null ? "<null>" : Blacklist.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BlackListOprator_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BlackListOprator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BlackListOprator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BlackListOprator_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBlackList_args : TBase
    {
      private string _bl_id;
      private IdentifyType _identify_type;
      private string _bl_identify_NO;
      private string _name;

      public string Bl_id
      {
        get
        {
          return _bl_id;
        }
        set
        {
          __isset.bl_id = true;
          this._bl_id = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="IdentifyType"/>
      /// </summary>
      public IdentifyType Identify_type
      {
        get
        {
          return _identify_type;
        }
        set
        {
          __isset.identify_type = true;
          this._identify_type = value;
        }
      }

      public string Bl_identify_NO
      {
        get
        {
          return _bl_identify_NO;
        }
        set
        {
          __isset.bl_identify_NO = true;
          this._bl_identify_NO = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bl_id;
        public bool identify_type;
        public bool bl_identify_NO;
        public bool name;
      }

      public GetBlackList_args() {
        this._identify_type = IdentifyType.IdCard;
        this.__isset.identify_type = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Bl_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Identify_type = (IdentifyType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Bl_identify_NO = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetBlackList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Bl_id != null && __isset.bl_id) {
            field.Name = "bl_id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Bl_id);
            oprot.WriteFieldEnd();
          }
          if (__isset.identify_type) {
            field.Name = "identify_type";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Identify_type);
            oprot.WriteFieldEnd();
          }
          if (Bl_identify_NO != null && __isset.bl_identify_NO) {
            field.Name = "bl_identify_NO";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Bl_identify_NO);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetBlackList_args(");
        bool __first = true;
        if (Bl_id != null && __isset.bl_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Bl_id: ");
          __sb.Append(Bl_id);
        }
        if (__isset.identify_type) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Identify_type: ");
          __sb.Append(Identify_type);
        }
        if (Bl_identify_NO != null && __isset.bl_identify_NO) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Bl_identify_NO: ");
          __sb.Append(Bl_identify_NO);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBlackList_result : TBase
    {
      private List<BlackList> _success;

      public List<BlackList> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBlackList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<BlackList>();
                    TList _list36 = iprot.ReadListBegin();
                    for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                    {
                      BlackList _elem38;
                      _elem38 = new BlackList();
                      _elem38.Read(iprot);
                      Success.Add(_elem38);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetBlackList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (BlackList _iter39 in Success)
                {
                  _iter39.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetBlackList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UploadImg2Bimg_args : TBase
    {
      private byte[] _imgBytes;

      public byte[] ImgBytes
      {
        get
        {
          return _imgBytes;
        }
        set
        {
          __isset.imgBytes = true;
          this._imgBytes = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imgBytes;
      }

      public UploadImg2Bimg_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ImgBytes = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UploadImg2Bimg_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ImgBytes != null && __isset.imgBytes) {
            field.Name = "imgBytes";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(ImgBytes);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UploadImg2Bimg_args(");
        bool __first = true;
        if (ImgBytes != null && __isset.imgBytes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ImgBytes: ");
          __sb.Append(ImgBytes);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UploadImg2Bimg_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UploadImg2Bimg_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UploadImg2Bimg_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UploadImg2Bimg_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
