/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftCommon
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorList : TBase
  {
    private string _vl_id;
    private long _vl_in_time;
    private long _vl_out_time;
    private string _vl_carryThings;

    public string Vl_id
    {
      get
      {
        return _vl_id;
      }
      set
      {
        __isset.vl_id = true;
        this._vl_id = value;
      }
    }

    public long Vl_in_time
    {
      get
      {
        return _vl_in_time;
      }
      set
      {
        __isset.vl_in_time = true;
        this._vl_in_time = value;
      }
    }

    public long Vl_out_time
    {
      get
      {
        return _vl_out_time;
      }
      set
      {
        __isset.vl_out_time = true;
        this._vl_out_time = value;
      }
    }

    public string Vl_carryThings
    {
      get
      {
        return _vl_carryThings;
      }
      set
      {
        __isset.vl_carryThings = true;
        this._vl_carryThings = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool vl_id;
      public bool vl_in_time;
      public bool vl_out_time;
      public bool vl_carryThings;
    }

    public VisitorList() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Vl_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Vl_in_time = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Vl_out_time = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Vl_carryThings = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorList");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Vl_id != null && __isset.vl_id) {
          field.Name = "vl_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Vl_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.vl_in_time) {
          field.Name = "vl_in_time";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Vl_in_time);
          oprot.WriteFieldEnd();
        }
        if (__isset.vl_out_time) {
          field.Name = "vl_out_time";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Vl_out_time);
          oprot.WriteFieldEnd();
        }
        if (Vl_carryThings != null && __isset.vl_carryThings) {
          field.Name = "vl_carryThings";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Vl_carryThings);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorList(");
      bool __first = true;
      if (Vl_id != null && __isset.vl_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vl_id: ");
        __sb.Append(Vl_id);
      }
      if (__isset.vl_in_time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vl_in_time: ");
        __sb.Append(Vl_in_time);
      }
      if (__isset.vl_out_time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vl_out_time: ");
        __sb.Append(Vl_out_time);
      }
      if (Vl_carryThings != null && __isset.vl_carryThings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vl_carryThings: ");
        __sb.Append(Vl_carryThings);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
