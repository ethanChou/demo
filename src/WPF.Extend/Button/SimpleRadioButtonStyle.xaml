<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WPF.Extend.Button">

    <!--<SolidColorBrush x:Key="SimpleRediaButtonBorder" Color="#5c94fa"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleRediaButtonBorderHover" Color="#5caffa"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleRediaButtonBorderPressed" Color="#5c9cfa"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleRediaButtonBorderChecked" Color="#5c9cfa"></SolidColorBrush>-->


    <SolidColorBrush x:Key="SimpleRediaButtonBorder" Color="#01a580"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleRediaButtonBorderHover" Color="#41bca0"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleRediaButtonBorderPressed" Color="#018c6d"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleRediaButtonBorderChecked" Color="#018c6d"></SolidColorBrush>

   
    
    <Style x:Key="{x:Type local:SimpleRadioButton}" TargetType="{x:Type local:SimpleRadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SimpleRadioButton}">
                    <Grid x:Name="LayoutRoot" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="CheckBorder" Width="16" Height="16" Margin="0,1,2,0" CornerRadius="2" 
                                Background="Transparent" 
                                BorderBrush="{DynamicResource SimpleRediaButtonBorder}" BorderThickness="2">
                            <Path x:Name="CheckMark" Width="9" Height="9" Stretch="Fill" Fill="{TemplateBinding Foreground}" Visibility="Collapsed" Data="F1 M 23.7501,33.25L 34.8334,44.3333L 52.2499,22.1668L 56.9999,26.9168L 34.8334,53.8333L 19.0001,38L 23.7501,33.25 Z "/>
                        </Border>
                        <ContentPresenter Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource SimpleRediaButtonBorderChecked}" />

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource SimpleRediaButtonBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource SimpleRediaButtonBorderPressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="SimpleCheckBoxBorder" Color="#0050ff"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleCheckBoxBorderHover" Color="#0078ff"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleCheckBoxBorderPressed" Color="#005eff"></SolidColorBrush>
    <SolidColorBrush x:Key="SimpleCheckBoxBorderChecked" Color="#005eff"></SolidColorBrush>
    
    <Style x:Key="SimpleCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource SimpleCheckBoxBorder}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="LayoutRoot" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="CheckBorder" Width="18" CornerRadius="2" Height="18" Margin="0,1,2,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Path x:Name="CheckMark" Width="10" Height="10" Margin="2" Visibility="Collapsed" Stretch="Fill" Fill="{TemplateBinding Foreground}" Data="F1 M 15,21L 22,28L 32.9999,14.0001L 35.9999,17.0001L 22,34L 12.0001,24L 15,21 Z "/>
                                <Rectangle x:Name="Indeterminate" Width="9" Height="9" Margin="3" Fill="{TemplateBinding Foreground}" Visibility="Hidden"/>
                            </Grid>
                        </Border>
                        <ContentPresenter Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsThreeState}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Gray" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Indeterminate" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CheckBorder" Property="BorderBrush" Value="Gray" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Indeterminate" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter TargetName="CheckBorder" Property="Background" Value="{DynamicResource SimpleCheckBoxBorderHover}" />-->
                            <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource SimpleCheckBoxBorderHover}" />
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource ButtonTextHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter TargetName="CheckBorder" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />-->
                            <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource SimpleCheckBoxBorderHoverPressed}" />
                            <!--<Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource ButtonTextPressed}" />-->
                        </Trigger>
                        <!--<Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>